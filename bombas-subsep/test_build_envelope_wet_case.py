# -*- coding: utf-8 -*-
"""
Created on Sun Jun 30 08:21:05 2024

@author: rodri
"""

from eos_database import *
from casadi import *
from numpy import exp, log, array, roots
from scipy.optimize import fsolve
from species_builder import R, Species, Mixture, pr_class

from matplotlib.pyplot import plot, figure
from matplotlib.ticker import AutoMinorLocator, ScalarFormatter
from gc_eos import gc_eos_class


def cp_ig_fun_pure(par,T):
    return par[0] + par[1]*T + par[2]*T**2 + par[3]*T**3 + par[4]*T**4 + par[5]*T**5

def enthapy_ig_fun_pure(par,T):
    return par[0]*T + par[1]*T**2 + par[2]*T**3 + par[3]*T**4 + par[4]*T**5 + par[5]*T**6

def pvap_fun_pure(par,T):
    return exp(par[0] + par[1]/(T+par[2]) + par[3]*log(T) + par[4]*T**par[5])

def kappa_fun(par,w):
    return par[0] + par[1]*w  + par[2]*w**2 + par[3]*w**3


list_of_names = ['H2O', 'N2_2*', 'CO2_2*', 'C1_2*', 'C2_2*', 'C3_2*', 
                'iC4_2*', 'nC4_2*', 'iC5_2*', 'nC5_2*', 'C6_2*', 'C7_2*', 'C8_2*', 'C9_2*', 'C10_2*', 'C11_2*', 
                'C12_2*', 'C13_2*', 'C14_2*', 'C15_2*', 'C16_2*', 'C17_2*', 'C18_2*', 'C19_2*', 'C20+_2*']

list_of_species = [Species(row[0], row[1], row[4]+273.15, row[5], row[6], row[7]) 
                   for row in critical_table if row[0] in list_of_names]

list_of_index = [i for i in range(len(critical_table)) if critical_table[i][0] in list_of_names]


Tcp = MX.sym('Tcp')
wcp = MX.sym('acentricity')

[list_of_species[i].set_cp_ig_function(
    Function('CP_i_IG',[Tcp],[cp_ig_fun_pure(cp_ig_p[i],Tcp)/list_of_species[i].MM]),
    Function('H_i_IG',[Tcp],[enthapy_ig_fun_pure(cp_ig_p[i],Tcp)/list_of_species[i].MM]))
                   for i in range(len(list_of_species))]

[list_of_species[i].set_p_vap_function(
    Function('Pvap',[Tcp],[pvap_fun_pure(p_vap_pol[i],Tcp)]))
                   for i in range(len(list_of_species))]

[list_of_species[i].set_kappa(
    Function('kappa',[wcp],[kappa_fun(kp[i],wcp)]))
                   for i in range(len(list_of_species))]

[species.evaluate_kappa() for species in list_of_species]


composition = [3.44945577070149e-003, 2.48960745236753e-003, 0.369253301096065, 0.350151113126578, 4.69925780689622e-002,
               3.16949914724554e-002, 5.27916552903917e-003, 1.38978027217423e-002, 4.97921253693917e-003, 7.57880126909168e-003,
               9.96842256582064e-003, 1.39977840819956e-002, 1.33978786580008e-002, 9.96842134103575e-003, 8.86859527510853e-003,
               7.47881522052249e-003, 6.77892590685044e-003, 7.07887819148949e-003, 6.27900478629509e-003, 5.67909973211496e-003,
               4.97921057183309e-003, 3.88938329490607e-003, 4.28931982002196e-003, 3.68941490974787e-003, 5.78908166003149e-002]


# composition = [.00552688,.00178958,.54945208,.28497686,.03133262,.02168416,
#                 .00387928,.00875324,.00268565,.00427715,.00557024,.0050729,
#                 .00775855,.00686334,.00576918,.00497343,.00457556,.00437662,
#                 .00358087,.00338193,.00268565,.00218831,.00238725,.00218831,.02427035]

# composition = [.00773653,.00198397,.59036782,.31137302,.02411984,.01955394,
#                .00317627,.0081392,.00258072,.0040696,.00148888,.00208443,
#                .00248146,.00208443,.00178665,.00148888,.00138962,.00138962,
#                .0011911,.0011911,.00089333,.00079407,.00079407,.00069481,.00714662]

vap_c = [0, 0.00270559439502555, 0.395468879053335, 0.376513409341907, 0.0497255293085478, 0.0331522048290799, 0.00546843943614775, 0.0143425068316865, 0.00508610361693041, 0.00772928608499506, 0.00988638569647146, 0.013637708688075, 0.0128867268731638, 0.00942526792209497, 0.00824587836817681, 0.00683078448185371, 0.00606423762390042, 0.00618991047721926, 0.00534385605926363, 0.00467964549882735, 0.00395605409430847, 0.00297428493573085, 0.00315177017269159, 0.00261043653666763, 0.0139250996738993]
liq_c = [0, 0.00113984663254082, 0.207178101239416, 0.18661558947374, 0.0303184837426038, 0.022977840574999, 0.00417729515842781, 0.0113479818602296, 0.00440915344970405, 0.00679112154438618, 0.0107663352359902, 0.0167223034657426, 0.0170963487796105, 0.0137868888566205, 0.0131795009634475, 0.0119192173746428, 0.0116376780309235, 0.0130870912154018, 0.0125688226563023, 0.0123744736149326, 0.0118115547184831, 0.00998540716091567, 0.0118529685979274, 0.0108537124437734, 0.347402283209239]

delta_v = [i for i in volumn_desviation]


dict_composition = {list_of_names[i]: composition[i] for i in range(len(composition))}
mixture = Mixture(list_of_species, dict_composition)

dict_composition = {list_of_names[i]: vap_c[i] for i in range(len(composition))}
mixturev = Mixture(list_of_species, dict_composition)

dict_composition = {list_of_names[i]: liq_c[i] for i in range(len(composition))}
mixturel = Mixture(list_of_species, dict_composition)

pinit = gc_eos_class(mixture, 94+273.15, 2.25e4, None, 2, -1, Aij, delta_v, 'liquid')

y0 =  [0]*2 + [0.5]*2 +[0]*20 + [1]

T_par = [-30, 600, 5, 45000]
P_par = [1000,100000,1000]

x0 = [0]*2 + [0.3]*2 +[0.3/20]*20 + [1]

pinit.build_phase_envelope(T_par, P_par, y0, x0)

phi, vap, liq = pinit.evaluate_flash(y0, x0)

Pbexp = [87882.75445381,87882.77855322,85770.82023567,83709.63847936,81697.98953877,77818.55736412,74123.34017546,70603.59051708,67250.97630658,64057.56111077,61015.78535832,55358.69168532,45569.371828,43480.57290125,43323.95119257,43516.20260796,44628.25455112,46597.59565864,50070.73897798,53524.7853482,58642.69970031,59730.65896627,59831.33554025,59814.21996524,59532.78514188,58948.72052478,58412.47119553,57770.44760533,57287.96202634,56764.6534188,56202.73640133,55604.32522233,54971.45242861,54306.08265371,53610.12270065,52885.4287778,52133.81163294,51357.03975628,49734.90779139,48937.79927667]
Tbexp = [-33.00351598,-33.00350937,-32.59924267,-32.17204044,-31.72074288,-30.74056593,-29.64657488,-28.42355407,-27.05203122,-25.50647115,-23.75238122,-19.40247491,-2.34790047,12.07139002,18.38978231,26.29959006,41.57970683,59.86264147,88.90283146,120.47545575,192.12062375,231.96045301,248.55191863,255.46360679,277.65529314,298.92340012,312.69316528,326.17875338,335.02287487,343.75552236,352.3799302,360.89827,369.31185018,377.62127529,385.82657501,393.92730961,401.92265615,409.81148258,425.263836,432.37312492]
Vbexp = [.08547519,.08547519,.08558411,.08569473,.08580716,.08603796,.08627763,.08652763,.0867898,.08706656,.0873612,.08802463,.09011804,.09158096,.0921766,.09289643,.09423612,.0957972,.09828457,.10111179,.10847498,.11341126,.11570367,.11670613,.12013432,.12375935,.12631061,.12898565,.13084442,.1327682,.13476108,.13682723,.13897097,.14119677,.14350929,.14591341,.14841424,.15101716,.15655233,.15932638]

Pdexp = [202.65,429.01005337,894.71043915,1843.41049031,3801.17134633,8188.14997806,10552.66732812,12701.9133587,19703.9139982,23359.42628889,27116.53426882,30956.11899415,34844.97211223,38735.6435436,42566.49298634,46262.21554919,48937.79927667]
Tdexp = [461.76508695,493.88620636,527.69289194,561.91644594,593.83560815,616.48534474,618.51739694,617.22907159,600.88473526,587.55449991,571.40886099,552.67875658,531.52481207,508.07918209,482.46747344,454.81845592,432.37312492]
Vdexp = [30.06643757,14.79593615,7.38869835,3.72913938,1.87561664,.9007143,.7060314,.59081571,.38747531,.32910404,.28524261,.25117989,.2240834,.20213468,.18410366,.1691217,.15932638]

Pexp = Pbexp + Pdexp
Vexp = Vbexp + Vdexp
Texp = Tbexp + Tdexp

# Pexp = [202.65,429.01005337,900.06765995,1879.0524575,3957.4123494,8766.70171473,11883.68562813,19420.53346215,43021.55271472,55523.21181754,61265.34049775,66166.10702195,69570.03427229,70247.59751654,70249.84115388,70029.68145147,69413.71188891,68670.49992807,68207.70066475,68200.24671335,68208.29684438,68235.54560042,68240.20005301,68242.52739836]
# Texp = [427.40089222,455.63452791,485.46086011,515.96826989,544.98756761,566.46826755,568.95265655,559.72985374,474.57621847,403.11450621,359.34639499,308.72660916,246.85405483,205.95752049,203.39897789,177.43202288,150.60489981,125.37503206,101.64732093,98.94277553,95.93950475,93.11827666,92.77934413,92.61810434]
# Vexp = [28.71302611,14.10248991,6.99366689,3.48527848,1.72027157,.80612374,.60226167,.37486885,.17075079,.12963328,.11484851,.10245311,.09136,.08557011,.08523764,.08202305,.07895434,.07623128,.07374252,.07345929,.07314441,.07284777,.07281207,.07279508]

# Pdexp = [202.65,334.113365507,549.666572771,903.032921413,1904.377242326,4077.538156475,9225.567721217,11338.340506564,20873.158389363,47226.22545444,61331.664930986,73071.666192785,77951.398766377,87196.033166665,92221.702521948,97537.033591776,103158.721447581]
# Tdexp = [385.457230425,401.13950209,417.417879897,434.15492308,459.49350801,483.20256755,499.289784593,500.214614366,488.012690062,397.582619495,319.995099722,203.483567006,101.491032243,64.868660593,57.733921297,52.810417487,49.226390269]
# Vdexp = [27.014076307,16.774780204,10.443384648,6.512503772,3.20266893,1.550078937,.70803459,.580011515,.319005418,.137201365,.100035063,.073304897,.059021471,.053981249,.052808795,.051897652,.051143462]


pinit.plot_envelope([P/100 for P in Pexp], Texp, Vexp)



